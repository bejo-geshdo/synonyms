name: Update Backend Prod

on:
  push:
    branches:
      - main
    paths:
      - backend/**
      - .github/workflows/backend.yml

  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_DEFAULT_REGION: eu-central-1
  credentials-account: arn:aws:iam::275567994947:role/synonyms-prod-gh-actions-ECR-role
  ENV_NAME: prod

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Install deps
        working-directory: ./backend
        run: |
          echo "Installing deps for test"
          npm ci

      - name: Transpile typescript
        working-directory: ./backend
        run: |
          echo "Running tsc"
          npm run build

      # Runs the Chai tests with Mocha
      - name: Test
        working-directory: ./backend
        run: |
          echo "Running tests"
          npm run test
          echo "tests succeded"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      # Get's access to aws
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.credentials-account }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Checkout
        uses: actions/checkout@v4

      # Gives Docker access to our ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Get's a short sha from the commit, used to tag the image
      - name: Add SHORT_SHA env property with commit short sha
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      # Build, tag, and push the image to Amazon ECR
      - name: Build, tag, and push
        id: build-image
        working-directory: ./backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: synonyms-${{env.ENV_NAME}}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:${SHORT_SHA}
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${SHORT_SHA}
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

        # TODO Add check if docker file can start up successfully
        # TODO add check that the new Docker file is deployed
